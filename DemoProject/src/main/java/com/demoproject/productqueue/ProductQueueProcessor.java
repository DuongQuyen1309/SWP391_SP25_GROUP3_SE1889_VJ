package com.demoproject.productqueue;

import com.demoproject.entity.Product;
import com.demoproject.service.ProductService;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.stereotype.Component;
import jakarta.annotation.PostConstruct;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

@Component
public class ProductQueueProcessor {
    private final ProductService productService;
    private final BlockingQueue<String> productQueue = new LinkedBlockingQueue<>(); // ‚úÖ ƒê√∫ng: L∆∞u JSON d∆∞·ªõi d·∫°ng String

    private final ExecutorService executorService = Executors.newSingleThreadExecutor(); // X·ª≠ l√Ω tu·∫ßn t·ª±

    public ProductQueueProcessor(ProductService productService) {
        this.productService = productService;
    }

    @PostConstruct
    public void startProcessing() {
        executorService.submit(() -> {
            while (true) {
                try {
                    String productDataJson = productQueue.take(); // ‚úÖ L·∫•y JSON t·ª´ h√†ng ƒë·ª£i

                    // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i sang ProductService
                    ObjectMapper objectMapper = new ObjectMapper();
                    List<Product> products = objectMapper.readValue(productDataJson, new TypeReference<List<Product>>() {});

                    for (Product product : products) {
                        System.out.println("üîª ProductQueueProcessor - Nh·∫≠n Product ID: " + product.getId() + ", Quantity: " + product.getQuantity());
                    }

                    productService.updateStockAfterBill(productDataJson); // ‚úÖ G·ª≠i JSON ƒë·∫øn service
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public void addProductsToQueue(List<Product> productList) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            String productDataJson = objectMapper.writeValueAsString(productList); // ‚úÖ Chuy·ªÉn `List<Product>` th√†nh JSON

            // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi ƒë∆∞a v√†o h√†ng ƒë·ª£i
            System.out.println("üéØ ProductQueueProcessor - ƒê∆∞a v√†o h√†ng ƒë·ª£i:");
            for (Product product : productList) {
                System.out.println("  - ID: " + product.getId() + ", Quantity: " + product.getQuantity());
            }

            productQueue.offer(productDataJson); // ‚úÖ ƒê∆∞a JSON v√†o h√†ng ƒë·ª£i
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

